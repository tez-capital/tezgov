import{E as f,G as O,H as T,O as c,J as x,K as y,p as g,P as d}from"./main-6fc58ee3.js";import{S}from"./SessionBase-d9d985fb.js";import{connect_beacon_wallet as m,disconnect_beacon_wallet as z}from"./beacon-d64c32ac.js";import{S as _}from"./DAppClient-a1a041fe.js";import"./taquito.es6-d1ea31ce.js";class w extends S{constructor(t,n,s,o,e){super(t,s,o,e),this.wallet=n}get AccountType(){return f.Beacon}get Icon(){return new O("/assets/svg/beacon-wallet-icon.svg",T.raw)}static async create(t,n){const s=x[t];if(!s)throw new Error("Invalid network specification!");const{account:o,tezos:e,forger:a,managerKey:r,wallet:i}=await m(s.id??t,{...n,rpc:(n==null?void 0:n.rpc)??s.rpc});return new w(o??"",i,e,a,{networkId:t,managerKey:r})}static async create_from_cache(){}logout(){z()}async switch_wallet(){return w.create(this.NetworkId,{rpc:this.Tezos.rpc.getRpcUrl(),useCached:!1})}async vote(t,n){if(n){const e=await this.forge_ballot_op(t),a=async()=>{const r=this.Tezos.wallet.context,i=await this.wallet.client.requestSignPayload({signingType:_.OPERATION,payload:"03"+e}),p=y(i.signature,g[d.SIG]),u=[...p.slice(0,p.length-2)].map(h=>h.toString(16).padStart(2,"0")).join(""),l=await this.Tezos.rpc.injectOperation(e.concat(u));return r.operationFactory.createOperation(l)};return new c(a,"Vote",{account:this.Account,ballot:t})}const s=await this.forge_ballot(t),o=async()=>{const e=this.Tezos.wallet.context,a=await this.wallet.sendOperations([s]);return e.operationFactory.createOperation(a)};return new c(o,"Vote",{account:this.Account,ballot:t})}async propose(t,n){if(n){const e=await this.forge_proposals_op(t),a=async()=>{const r=this.Tezos.wallet.context,i=await this.wallet.client.requestSignPayload({signingType:_.OPERATION,payload:"03".concat(e)}),p=y(i.signature,g[d.SIG]),u=[...p.slice(0,p.length-2)].map(h=>h.toString(16).padStart(2,"0")).join(""),l=await this.Tezos.rpc.injectOperation(e.concat(u));return r.operationFactory.createOperation(l)};return new c(a,"Propose",{account:this.Account,proposals:t})}const s=await this.forge_proposals(t),o=async()=>{const e=this.Tezos.wallet.context,a=await this.wallet.sendOperations([s]);return e.operationFactory.createOperation(a)};return new c(o,"Propose",{account:this.Account,proposals:t})}async set_deposits_limit(t){const n=await this.forge_set_deposit_op(t),s=async()=>{const o=this.Tezos.wallet.context,e=await this.wallet.sendOperations([n]);return o.operationFactory.createOperation(e)};return new c(s,"Set Deposit",{account:this.Account,limit:t.toString()})}async update_consensus_key(t){const n=await this.forge_update_consensus_key_op(t),s=async()=>{const o=this.Tezos.wallet.context,e=await this.wallet.sendOperations([n]);return o.operationFactory.createOperation(e)};return new c(s,"Set Deposit",{account:this.Account,"Consensus Key":t})}async restore_consensus_key(){const t=await this.Tezos.signer.publicKey(),n=await this.forge_update_consensus_key_op(t),s=async()=>{const o=this.Tezos.wallet.context,e=await this.Tezos.signer.sign(n,new Uint8Array([3])),a=await this.Tezos.rpc.injectOperation(e.sbytes);return o.operationFactory.createOperation(a)};return new c(s,"Restore consensus key",{account:this.Account,"Consensus Key":t})}}export{w as BeaconSession};
