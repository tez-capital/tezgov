import{E as f,G as O,H as x,O as i,J as T,P as a,K as g,p as _}from"./main-DxaLaxw5.js";import{S as z}from"./SessionBase-C8gK9Vn2.js";import{connect_beacon_wallet as I,disconnect_beacon_wallet as P}from"./beacon-CBX1LcrG.js";import{S}from"./WalletConnectCommunicationClient-Bim38HzX.js";import"./taquito.es6-DdqCsFb8.js";class y extends z{constructor(t,s,n,o,e){super(t,n,o,e),this.wallet=s}get AccountType(){return f.Beacon}get Icon(){return new O("/assets/svg/beacon-wallet-icon.svg",x.raw)}static async create(t,s){const n=T[t];if(!n)throw new Error("Invalid network specification!");const{account:o,tezos:e,forger:c,managerKey:u,wallet:p}=await I(n.id??t,{...s,rpc:(s==null?void 0:s.rpc)??n.rpc});return new y(o??"",p,e,c,{networkId:t,managerKey:u})}static async create_from_cache(){}logout(){P()}async switch_wallet(){return y.create(this.NetworkId,{rpc:this.Tezos.rpc.getRpcUrl(),useCached:!1})}async vote(t,s){if(s){const e=await this.forge_ballot_op(t),c=async()=>{const u=this.Tezos.wallet.context,p=await this.wallet.client.requestSignPayload({signingType:S.OPERATION,payload:"03"+e});let r=a.SIG;switch(p.signature.slice(0,5)){case a.EDSIG:r=a.EDSIG;break;case a.SPSIG:r=a.SPSIG;break;case a.P2SIG:r=a.P2SIG;break}const h=[...g(p.signature,_[r])].map(w=>w.toString(16).padStart(2,"0")).join(""),l=await this.Tezos.rpc.injectOperation(e.concat(h));return u.operationFactory.createOperation(l)};return new i(c,"Vote",{account:this.Account,ballot:t})}const n=await this.forge_ballot(t),o=async()=>{const e=this.Tezos.wallet.context,c=await this.wallet.sendOperations([n]);return e.operationFactory.createOperation(c)};return new i(o,"Vote",{account:this.Account,ballot:t})}async propose(t,s){if(s){const e=await this.forge_proposals_op(t),c=async()=>{const u=this.Tezos.wallet.context,p=await this.wallet.client.requestSignPayload({signingType:S.OPERATION,payload:"03".concat(e)});let r=a.SIG;switch(p.signature.slice(0,5)){case a.EDSIG:r=a.EDSIG;break;case a.SPSIG:r=a.SPSIG;break;case a.P2SIG:r=a.P2SIG;break}const h=[...g(p.signature,_[r])].map(w=>w.toString(16).padStart(2,"0")).join(""),l=await this.Tezos.rpc.injectOperation(e.concat(h));return u.operationFactory.createOperation(l)};return new i(c,"Propose",{account:this.Account,proposals:t})}const n=await this.forge_proposals(t),o=async()=>{const e=this.Tezos.wallet.context,c=await this.wallet.sendOperations([n]);return e.operationFactory.createOperation(c)};return new i(o,"Propose",{account:this.Account,proposals:t})}async set_deposits_limit(t){const s=await this.forge_set_deposit_op(t),n=async()=>{const o=this.Tezos.wallet.context,e=await this.wallet.sendOperations([s]);return o.operationFactory.createOperation(e)};return new i(n,"Set Deposit",{account:this.Account,limit:t.toString()})}async update_consensus_key(t){const s=await this.forge_update_consensus_key_op(t),n=async()=>{const o=this.Tezos.wallet.context,e=await this.wallet.sendOperations([s]);return o.operationFactory.createOperation(e)};return new i(n,"Set Deposit",{account:this.Account,"Consensus Key":t})}async restore_consensus_key(){const t=await this.Tezos.signer.publicKey(),s=await this.forge_update_consensus_key_op(t),n=async()=>{const o=this.Tezos.wallet.context,e=await this.Tezos.signer.sign(s,new Uint8Array([3])),c=await this.Tezos.rpc.injectOperation(e.sbytes);return o.operationFactory.createOperation(c)};return new i(n,"Restore consensus key",{account:this.Account,"Consensus Key":t})}async finalize_unstake(){const t=await this.forge_finalize_unstake(),s=async()=>{const n=this.Tezos.wallet.context,o=await this.Tezos.signer.sign(t,new Uint8Array([3])),e=await this.Tezos.rpc.injectOperation(o.sbytes);return n.operationFactory.createOperation(e)};return new i(s,"Finalize Unstake",{account:this.Account})}}export{y as BeaconSession};
