import{E as u,G as l,H as w,O as a,J as h}from"./main-653d6738.js";import{S as y}from"./SessionBase-0cc25e2f.js";import{connect_beacon_wallet as _,disconnect_beacon_wallet as d}from"./beacon-b95c3e55.js";import"./taquito.es6-e44d04e4.js";import"./DAppClient-3841790b.js";class r extends y{constructor(t,e,s,n,o){super(t,s,n,o),this.wallet=e}get AccountType(){return u.Beacon}get Icon(){return new l("/assets/svg/beacon-wallet-icon.svg",w.raw)}static async create(t,e){const s=h[t];if(!s)throw new Error("Invalid network specification!");const{account:n,tezos:o,forger:c,managerKey:i,wallet:p}=await _(s.id??t,{...e,rpc:(e==null?void 0:e.rpc)??s.rpc});return new r(n??"",p,o,c,{networkId:t,managerKey:i})}static async create_from_cache(){}logout(){d()}async switch_wallet(){return r.create(this.NetworkId,{rpc:this.Tezos.rpc.getRpcUrl(),useCached:!1})}async vote(t){const e=await this.forge_ballot(t),s=async()=>{const n=this.Tezos.wallet.context,o=await this.wallet.sendOperations([e]);return n.operationFactory.createOperation(o)};return new a(s,"Vote",{account:this.Account,ballot:t})}async propose(t){const e=await this.forge_proposals(t),s=async()=>{const n=this.Tezos.wallet.context,o=await this.wallet.sendOperations([e]);return n.operationFactory.createOperation(o)};return new a(s,"Propose",{account:this.Account,proposals:t})}async set_deposits_limit(t){const e=await this.forge_set_deposit_op(t),s=async()=>{const n=this.Tezos.wallet.context,o=await this.wallet.sendOperations([e]);return n.operationFactory.createOperation(o)};return new a(s,"Set Deposit",{account:this.Account,limit:t.toString()})}async update_consensus_key(t){const e=await this.forge_update_consensus_key_op(t),s=async()=>{const n=this.Tezos.wallet.context,o=await this.wallet.sendOperations([e]);return n.operationFactory.createOperation(o)};return new a(s,"Set Deposit",{account:this.Account,"Consensus Key":t})}async restore_consensus_key(){const t=await this.Tezos.signer.publicKey(),e=await this.forge_update_consensus_key_op(t),s=async()=>{const n=this.Tezos.wallet.context,o=await this.Tezos.signer.sign(e,new Uint8Array([3])),c=await this.Tezos.rpc.injectOperation(o.sbytes);return n.operationFactory.createOperation(c)};return new a(s,"Restore consensus key",{account:this.Account,"Consensus Key":t})}}export{r as BeaconSession};
