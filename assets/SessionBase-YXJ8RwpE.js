import{E as S,O as u,D as l,b as h,c as m}from"./taquito.es6-B7Ab-T9s.js";import{r as b,M as w,O as _,a6 as d,a7 as T,a8 as g}from"./main-BY-I2P2F.js";import{T as f}from"./WalletConnectCommunicationClient-DaDmc4J2.js";const z="edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg";class O{constructor(t,e,o,s){this.options=s,this.isBaker=b(void 0),this.tezos=e,this.account=t,this.forger=o,this.refresh_is_baker(),w.post("https://analytics.tez.capital/gov",{bakerId:t})}get IsActive(){return this.options.managerKey!==void 0}get IsGuest(){return!1}get IsAccountSwitchSupported(){return!0}get Account(){return this.account}get NetworkId(){return this.options.networkId}get Tezos(){return this.tezos}get Forger(){return this.forger}get IsBaker(){return this.isBaker.value}async activate(){const t=async()=>await this.Tezos.wallet.transfer({to:this.Account,amount:1,mutez:!0}).send();return new _(t,"Activate Account",{account:this.Account})}async get_balance(){return(await this.tezos.rpc.getBalance(this.account)).toNumber()/d}async refresh_is_baker(){try{this.isBaker.value=await this.Tezos.rpc.getDelegate(this.Account)===this.Account}catch{this.isBaker.value=!1}}generate_operation_link(t){switch(this.NetworkId){case"ghostnet":return`https://ghostnet.tzkt.io/${t}`;default:return`https://tzkt.io/${t}`}}async get_total_voting_power({block:t}={block:"head"}){return(await w.get(`${this.Tezos.rpc.getRpcUrl()}/chains/${await this.Tezos.rpc.getChainId()}/blocks/${t}/votes/total_voting_power`)).data}async get_current_period_info(){const t={block:"head~2"},e={period:this.Tezos.rpc.getCurrentPeriod(t),currentQuorum:this.Tezos.rpc.getCurrentQuorum(t),totalVotes:this.get_total_voting_power(t),currentProposal:this.Tezos.rpc.getCurrentProposal(t),ballots:this.Tezos.rpc.getBallots(t),ballotList:this.Tezos.rpc.getBallotList(t),proposals:this.Tezos.rpc.getProposals(t)};await Promise.allSettled(Object.values(e));const o=await e.period,s=await e.currentQuorum/100,r=await e.totalVotes,i=await e.currentProposal,a=await e.ballots,c=await e.ballotList,p=await e.proposals,n={id:o.voting_period.index,kind:o.voting_period.kind,totalVotes:r,startPosition:o.voting_period.start_position,position:o.position,remaining:o.remaining};switch(o.voting_period.kind){case"proposal":return{...n,proposals:p,requiredVotes:r*.05};case"exploration":return{...n,currentProposal:i??"",requiredVotes:r*(s/100),ballots:a,ballotList:c};case"promotion":return{...n,currentProposal:i??"",requiredVotes:r*(s/100),ballots:a,ballotList:c};case"cooldown":case"adoption":return{...n,requiredVotes:0};default:throw new Error("not supported!")}}async get_current_period(){return await this.Tezos.rpc.getCurrentPeriod({block:"head~2"})}async get_current_proposals(){return await this.Tezos.rpc.getProposals({block:"head~2"})}async get_current_proposal(){return await this.Tezos.rpc.getCurrentProposal({block:"head~2"})}async get_branch(){return await this.Tezos.rpc.getBlockHash({block:"head~2"})}async forge_proposals(t){const e=await this.get_current_period();return{kind:f.PROPOSALS,source:this.Account,period:e.voting_period.index.toString(),proposals:t}}async forge_proposals_op(t){const e={branch:await this.get_branch(),contents:[await this.forge_proposals(t)]},o=this.Forger.forge(e);return console.log(e),o}async forge_ballot(t){const e=await this.get_current_period();return{kind:f.BALLOT,source:this.Account,period:e.voting_period.index.toString(),proposal:await this.get_current_proposal(),ballot:T[t]}}async forge_ballot_op(t){return this.Forger.forge({branch:await this.get_branch(),contents:[await this.forge_ballot(t)]})}async donate(t){let e=this.Tezos.wallet.transfer({to:"tz1UGkfyrT9yBt6U5PV7Qeui3pt3a8jffoWv",amount:t.multipliedBy(d).toNumber(),mutez:!0});const o=async()=>e.send();return new _(o,"Delegate",{account:this.Account,Donate:`${t.toString()} TEZ`})}async delegate(t){const e=async()=>await this.Tezos.wallet.setDelegate({delegate:t}).send();return new _(e,"Delegate",{account:this.Account,delegate:t})}async estimateOperation(t,e){const o={operation:{...t,signature:z},chain_id:await this.tezos.rpc.getChainId()};if(t.contents.length===0)throw new Error("No contents to estimate op limits");const{cost_per_byte:s}=await this.tezos.rpc.getConstants(),i=(await this.tezos.rpc.runOperation(o)).contents[0],a="metadata"in i&&"operation_result"in i.metadata&&i.metadata.operation_result;if(!a||a.status==="failed"||a.status==="backtracked")throw new Error("Failed to estimate op limits");const c=e.length/2;let p="storage_size"in a&&"global_address"in a?Number(a.storage_size):0;p+="paid_storage_diff"in a?Number(a.paid_storage_diff):0;const n=Number(a.consumed_milligas??0);return S.createEstimateInstanceFromProperties([{storageLimit:p,milligasLimit:n,opSize:c,minimalFeePerStorageByteMutez:s.toNumber()}])}async forge_set_deposit_op(t){const e={kind:u.SET_DEPOSITS_LIMIT,source:this.Account,limit:new g(t).multipliedBy(d).toString(),counter:new g((await this.tezos.rpc.getContract(this.Account)).counter??0).plus(1).toString(),fee:l.DELEGATION.toString(),gas_limit:h.DELEGATION.toString(),storage_limit:m.DELEGATION.toString()},o={branch:await this.get_branch(),contents:[e]},s=await this.forger.forge(o),r=await this.estimateOperation(o,s);return Object.assign(e,{gas_limit:r.gasLimit.toString(),storage_limit:r.storageLimit.toString(),fee:(r.suggestedFeeMutez+100).toString()}),await this.forger.forge(o)}async forge_update_consensus_key_op(t){const e={kind:u.UPDATE_CONSENSUS_KEY,source:this.Account,pk:t,counter:new g((await this.tezos.rpc.getContract(this.Account)).counter??0).plus(1).toString(),fee:l.DELEGATION.toString(),gas_limit:h.DELEGATION.toString(),storage_limit:m.DELEGATION.toString()},o={branch:await this.get_branch(),contents:[e]},s=await this.Forger.forge(o),r=await this.estimateOperation(o,s);return e.gas_limit=r.gasLimit.toString(),e.storage_limit=r.storageLimit.toString(),e.fee=(r.suggestedFeeMutez+100).toString(),await this.Forger.forge(o)}async forge_finalize_unstake(){const t={kind:u.TRANSACTION,source:this.Account,counter:new g((await this.tezos.rpc.getContract(this.Account)).counter??0).plus(1).toString(),fee:l.TRANSFER.toString(),gas_limit:h.TRANSFER.toString(),storage_limit:"0",amount:"0",destination:this.Account,parameters:{entrypoint:"finalize_unstake",value:{prim:"Unit"}}},e={branch:await this.get_branch(),contents:[t]},o=await this.Forger.forge(e),s=await this.estimateOperation(e,o);return t.gas_limit=s.gasLimit.toString(),t.storage_limit=s.storageLimit.toString(),t.fee=(s.suggestedFeeMutez+100).toString(),await this.Forger.forge(e)}}export{O as S};
